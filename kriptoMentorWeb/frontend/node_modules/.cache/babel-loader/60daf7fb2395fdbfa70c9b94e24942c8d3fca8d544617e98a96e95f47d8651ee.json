{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yusuf Uygur\\\\Documents\\\\GitHub\\\\KriptoMentorSon\\\\kriptoMentorWeb\\\\frontend\\\\src\\\\context\\\\SignalsContext.js\",\n  _s = $RefreshSig$();\n// src/context/SignalsContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SignalsContext = /*#__PURE__*/createContext({\n  signals: [],\n  addSignal: async () => {}\n});\nexport function SignalsProvider({\n  children\n}) {\n  _s();\n  const [signals, setSignals] = useState([]);\n\n  // DB kaydını bizim modele çevir\n  const mapSignal = r => ({\n    id: r.id,\n    userId: r.user_id,\n    username: r.username,\n    symbol: r.symbol,\n    direction: r.direction,\n    timeFrame: r.timeframe,\n    entryPrice: r.entry_price,\n    recommendedLeverage: r.recommended_leverage,\n    targets: [r.target1, r.target2, r.target3],\n    stopLoss: r.stop_loss,\n    timestamp: r.timestamp\n  });\n\n  // İlk yükleme: varolan sinyalleri çek\n  useEffect(() => {\n    const fetchSignals = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('signals').select('*').order('timestamp', {\n        ascending: false\n      });\n      if (!error && data) {\n        setSignals(data.map(mapSignal));\n      }\n    };\n    fetchSignals();\n\n    // Realtime: yeni insert olaylarını dinle\n    const channel = supabase.channel('signals').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'signals'\n    }, payload => {\n      setSignals(prev => [mapSignal(payload.new), ...prev]);\n    }).subscribe();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n\n  // Yeni sinyal ekleme\n  const addSignal = async ({\n    userId,\n    username,\n    symbol,\n    direction,\n    timeFrame,\n    entryPrice,\n    recommendedLeverage,\n    targets,\n    stopLoss,\n    timestamp\n  }) => {\n    // Optimistik güncelle\n    const temp = {\n      id: `temp-${Date.now()}`,\n      userId,\n      username,\n      symbol,\n      direction,\n      timeFrame,\n      entryPrice,\n      recommendedLeverage,\n      targets,\n      stopLoss,\n      timestamp\n    };\n    setSignals(prev => [temp, ...prev]);\n\n    // DB'ye yaz\n    const {\n      data,\n      error\n    } = await supabase.from('signals').insert({\n      user_id: userId,\n      username,\n      symbol,\n      direction,\n      timeframe: timeFrame,\n      entry_price: entryPrice,\n      recommended_leverage: recommendedLeverage,\n      target1: targets[0],\n      target2: targets[1],\n      target3: targets[2],\n      stop_loss: stopLoss,\n      timestamp\n    }).select().single();\n    if (error) {\n      console.error('Sinyal ekleme hatası:', error);\n      return;\n    }\n\n    // Gerçek veriyle temp kaydını değiştir\n    setSignals(prev => prev.map(s => s.id === temp.id ? mapSignal(data) : s));\n  };\n  return /*#__PURE__*/_jsxDEV(SignalsContext.Provider, {\n    value: {\n      signals,\n      addSignal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(SignalsProvider, \"9eYi07E/CN6PFRDo2boxZzV6kmA=\");\n_c = SignalsProvider;\nvar _c;\n$RefreshReg$(_c, \"SignalsProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","SignalsContext","signals","addSignal","SignalsProvider","children","_s","setSignals","mapSignal","r","id","userId","user_id","username","symbol","direction","timeFrame","timeframe","entryPrice","entry_price","recommendedLeverage","recommended_leverage","targets","target1","target2","target3","stopLoss","stop_loss","timestamp","fetchSignals","data","error","from","select","order","ascending","map","channel","on","event","schema","table","payload","prev","new","subscribe","removeChannel","temp","Date","now","insert","single","console","s","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Yusuf Uygur/Documents/GitHub/KriptoMentorSon/kriptoMentorWeb/frontend/src/context/SignalsContext.js"],"sourcesContent":["// src/context/SignalsContext.js\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\n\r\nexport const SignalsContext = createContext({\r\n  signals: [],\r\n  addSignal: async () => {}\r\n});\r\n\r\nexport function SignalsProvider({ children }) {\r\n  const [signals, setSignals] = useState([]);\r\n\r\n  // DB kaydını bizim modele çevir\r\n  const mapSignal = (r) => ({\r\n    id: r.id,\r\n    userId: r.user_id,\r\n    username: r.username,\r\n    symbol: r.symbol,\r\n    direction: r.direction,\r\n    timeFrame: r.timeframe,\r\n    entryPrice: r.entry_price,\r\n    recommendedLeverage: r.recommended_leverage,\r\n    targets: [r.target1, r.target2, r.target3],\r\n    stopLoss: r.stop_loss,\r\n    timestamp: r.timestamp\r\n  });\r\n\r\n  // İlk yükleme: varolan sinyalleri çek\r\n  useEffect(() => {\r\n    const fetchSignals = async () => {\r\n      const { data, error } = await supabase\r\n        .from('signals')\r\n        .select('*')\r\n        .order('timestamp', { ascending: false });\r\n      if (!error && data) {\r\n        setSignals(data.map(mapSignal));\r\n      }\r\n    };\r\n\r\n    fetchSignals();\r\n\r\n    // Realtime: yeni insert olaylarını dinle\r\n    const channel = supabase\r\n      .channel('signals')\r\n      .on(\r\n        'postgres_changes',\r\n        { event: 'INSERT', schema: 'public', table: 'signals' },\r\n        (payload) => {\r\n          setSignals(prev => [mapSignal(payload.new), ...prev]);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  // Yeni sinyal ekleme\r\n  const addSignal = async ({\r\n    userId,\r\n    username,\r\n    symbol,\r\n    direction,\r\n    timeFrame,\r\n    entryPrice,\r\n    recommendedLeverage,\r\n    targets,\r\n    stopLoss,\r\n    timestamp\r\n  }) => {\r\n    // Optimistik güncelle\r\n    const temp = {\r\n      id: `temp-${Date.now()}`,\r\n      userId,\r\n      username,\r\n      symbol,\r\n      direction,\r\n      timeFrame,\r\n      entryPrice,\r\n      recommendedLeverage,\r\n      targets,\r\n      stopLoss,\r\n      timestamp\r\n    };\r\n    setSignals(prev => [temp, ...prev]);\r\n\r\n    // DB'ye yaz\r\n    const { data, error } = await supabase\r\n      .from('signals')\r\n      .insert({\r\n        user_id: userId,\r\n        username,\r\n        symbol,\r\n        direction,\r\n        timeframe: timeFrame,\r\n        entry_price: entryPrice,\r\n        recommended_leverage: recommendedLeverage,\r\n        target1: targets[0],\r\n        target2: targets[1],\r\n        target3: targets[2],\r\n        stop_loss: stopLoss,\r\n        timestamp\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Sinyal ekleme hatası:', error);\r\n      return;\r\n    }\r\n\r\n    // Gerçek veriyle temp kaydını değiştir\r\n    setSignals(prev =>\r\n      prev.map(s => (s.id === temp.id ? mapSignal(data) : s))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <SignalsContext.Provider value={{ signals, addSignal }}>\r\n      {children}\r\n    </SignalsContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}